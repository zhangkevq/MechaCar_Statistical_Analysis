knitr::opts_chunk$set(echo = TRUE)
install.packages("hflights")
install.packages("dplyer")
library(hflights)
library(dplyer)
library(dplyer)
install.packages("dplyr")
library(dplyr)
data(hflights)
head(hflights)
flights - as.data.frame(hflights)
flights =as.data.frame(hflights)
filter[flights$Month == 1 & flights$DayofMonth == 1, ]
filter[flights$Month == 1 & flights$DayofMonth == 1, ]
filter(flights, Month = 1, DayofMonth == 1)
filter(flights, Month == 1, DayofMonth == 1)
filter(flights, UniqueCarrier == "AA" |
Unique Carrier == "UA")
filter(flights, UniqueCarrier %in% c("AA", "UA"))
select(flights, DepTime, ArrTime, FlightNum)
select(flights, Year: DayofMonth, contains("Taxi"),
contains("Delay"), starts_with("Cancel"))
select(flights, -c(Year:TailNum))
x1 = 1:5; x2 = 2:6
sqrt(sum( (x1 - x2)^2) )
(x1 - x2)^2 %>% sum() %>% sqrt()
flights$Speed = flights$Distance / flights$Airtime * 60
flights$Speed = flights$Distance/flights$Airtime * 60
flights$Speed = flights$Distance/flights$AirTime * 60
flights[, c("Distance", "AirTime", "Speed")]
flights %>%
select(Distance, AirTime) %>%
mutate(Speed = Distance/AirTime * 60)
flights = flights %>% mutate(Speed =
Distance/AirTime * 60)
with(flights, tapply(ArrDelay, Dest, mean,
na.rm = TRUE))
aggregate(ArrDelay ~ Dest, flights, mean)
library(dplyr)
al1<-algae[,-(9:18)]
al1<-al1[,-(1:6)]
v=numeric(0)
for (x in c(7:8)){
q<-var(algae[,x],na.rm=TRUE)
v=c(v,q)
}
names(v)=c("NO3","NH4")
v
n=numeric(0)
for (x in c(7:8)){
q<-median(algae[,x],na.rm=TRUE)
n=c(n,q)
}
names(n)=c("NO3","NH4")
n
m=numeric(0)
for (x in c(7:8)){
q<-mad(algae[,x],na.rm=TRUE)
m=c(m,q)
}
names(m)=c("NO3","NH4")
m
?acf()\
?acf()
set.seed(200)
x = arima.sim(n = 200, model = list(ma = c(0.5)))
y = acf(x, main = expression(theta1 = theta))
acf = y$acf[2]
plot(acf)
acf
acv_ar <- acf(ar2)ar$acf[c(1,2)]/acf_ar$acf[1])
acv_ar <- acf(ar2,ar$acf[c(1,2)]/acf_ar$acf[1])
ar2 <- arima.sim(model = list(ar = c(.7, -.1), sd = 1), n = 200)
acv_ar <- acf(ar2, type = "correlation", main = "Sample ACF", plot = F)
Rho <- toeplitz(acf_ar$acf[c(1,2)]acv_ar$acf[1])
Rho <- toeplitz(acf_ar$acf[c(1,2)]/acv_ar$acf[1])
Rho <- toeplitz(acv_ar$acf[c(1,2)]/acv_ar$acf[1])
rho <- acv_ar$acf[c(2,3)]/acv_ar$acf[1]
phi_hat <- solve(Rho) %*% rho
phi_hat
?polyroot
polyroot(1,2,-8)
polyroot(c[1,2,-8])
polyroot(c(1,2,-8))
set.seed(200)
x = arima.sim(n = 200, model = list(ma = c(0.5)))
y = acf(x, main = expression(theta1 = theta))
acf = y$acf[2]
acf
plot(y)
polyroot(c(1,4/3,1/3))
polyroot(c(1,-5/2,1))
polyroot(c(1,-4/3,1/3))
set.seed(300)
x2 = arima.sim(n = 300, model = list(ma = c(2,-8)))
?arima.sim
?acf
y2 = acf(x2, main = expression(theta2 = theta))
acf = y2%acf[2]
acf = y2$acf[2]
acf2 = y2$acf[2]
acf = y$acf[2]
acf2
set.seed(300)
x2 = arima.sim(n = 300, model = list(ma = c(2,-8)))
y2 = acf(x2, main = expression(theta2 = theta))
acf2 = y2$acf[2]
acf2
library(bmp)
install.packages('bmp')
knitr::opts_chunk$set(echo=TRUE,
cache=TRUE,
fig.width=5,
fig.height=5,
fig.align='center')
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
solcode = TRUE
r = function(x, digits=2){ round(x, digits=digits) }
# install.packages('bmp')
library(bmp)
img = read.bmp('image1.bmp')
knitr::opts_chunk$set(echo=TRUE,
cache=TRUE,
fig.width=5,
fig.height=5,
fig.align='center')
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
solcode = TRUE
r = function(x, digits=2){ round(x, digits=digits) }
# install.packages('bmp')
library(bmp)
img = read.bmp('image1.bmp')
img = t(img[ncol(img):1,])      # fix orientation
img = img - mean(img)           # subtract overall mean
gs = grey((0:255)/255)
image(img, asp=1, col=gs, yaxs='r', xaxt='n', yaxt='n')
?bmt::xaxt
?bmt::??xaxt
bmt::??xaxt
??bmt::xaxt
??xaxt
?graphics::xaxt
?graphics::??xaxt
?graphics::xaxt
graphics::??xaxt
graphics::xaxt
xaxt
??xaxt
# install.packages('bmp')
library(bmp)
img = read.bmp('image1.bmp')
img = t(img[ncol(img):1,])      # fix orientation
img = img - mean(img)           # subtract overall mean
prcomp(img)
gs
library(bmp)
pca.img <- prcomp(img)
pca.img2 <- img * pca.img$rotation
pca.img2
pca.img$x
sum(pca.img$x - (img * pca.img$rotation))^2
sum(pca.img$x - (img * pca.img$rotation)^2)
sum((pca.img2)^2)
sum((pca.img2))^2
sum((pca.img2)^2)
sum((pca.img)^2)
sum((pca.img))^2
sum(is.list(pca.img))^2
sum((pca.img))^2
sum((pca.img2))^2
sum((pca.img2)^2)
sum(pca.img$x(pca.img2)^2)
sum(pca.img$x-(pca.img2)^2)
sum((pca.img2)^2)
pca.img$x
pca.img3 <- prcomp(pca.img2)
pca.img3
sum((pca.img2)^2)
sum((pca.img2))^2
sum((pca.img2))^2
sum((pca.img2)^2)
sum((pca.img2))^2
sum(pca.img2^2)
sum((pca.img$x-pca.img2)^2)
sum((pca.img$x-pca.img2))^2
sum(pca.img$x - pca.img2)^2
pca.img$x-pca.img2
mean(pca.img$x-pca.img2)
mean((pca.img$x-pca.img2)
f
mean((pca.img$x-pca.img2)^2)
mean((pca.img$x-pca.img2))^2
norm(pca.img$x - pca.img2)
norm
?norm
norm(pca.img$x - pca.img2, type = "M")
norm(pca.img$x - pca.img2, type = "2")
norm(pca.img$x - pca.img2, type = "F")
norm(pca.img$x - pca.img2, type = "I")
norm((pca.img$x - pca.img2)^2, type = "M")
norm(pca.img$x - pca.img2, type = "M")
library(bmp)
pca.img2 <- img * pca.img$rotation
??na.rm
norm(pca.img$x - pca.img2, type = "1")
norm(pca.img$x - pca.img2, type = "0")
norm(pca.img$x - pca.img2, type = "O")
norm(pca.img$x - pca.img2, type = "M")
norm(pca.img$x - pca.img2, type = "M")^2
norm(pca.img$x - pca.img2, type = "M")
norm(pca.img$x - pca.img2)
norm(pca.img$x - pca.img2, type = "M")
set.seed(1)
sample(1:10, replace = F)
set.seed(1)
sample(1:10, replace = F)
setwd("C:/Users/zbzin/Desktop/Work Folder/Bootcamp UCB Extension Data Science/MechaCar_Statistical_Analysis")
load("C:/Users/zbzin/Desktop/Work Folder/Bootcamp UCB Extension Data Science/MechaCar_Statistical_Analysis/R_Analysis/01_demo/.RData")
setwd("C:/Users/zbzin/Desktop/Work Folder/Bootcamp UCB Extension Data Science/MechaCar_Statistical_Analysis")
mecha_table <- read.csv(file='MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
library(jsonlite)
### Del. 1
# load package
library(dplyr)
head(MechaCar_mpg)
#import and read csv
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv', check.names = F, stringsAsFactors = F)
head(MechaCar_mpg)
# linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaChar_mpg)
# linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg)
# summary statistics
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD ,data=MechaCar_mpg))
### Del. 2
# import and read csv
Suspension_Coil <- read.csv(file='Suspension_Coil.csv', check.names = F, stringsAsFactors = F)
head(Suspension_Coil)
# stat summary with summarize()
total_summary <- Suspensino_Coil %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI), .groups= 'keep')
# stat summary with summarize()
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI), .groups= 'keep')
lot_summary <- lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI),Median = median(PSI), Variance = var(PSI), SD = sd(PSI) , .groups = 'keep')
# stat summary with summarize()
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI), .groups = 'keep')
### Del. 3
# t-test for all the lots, pop mu = 1500 psi
t.test(Suspension_Coil$PSI, mu=mean(Suspension_Coil$PSI))
# t-test for lot 1
t.test(subset(Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot == "Lot1"), mu=mean(Suspension_Coil$PSI)
# t-test for lot 2
t.test(subset(Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot == "Lot2"), mu=mean(Suspension_Coil$PSI)
# t-test for lot 3
t.test(subset(Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot == "Lot3"), mu=mean(Suspension_Coil$PSI)
# t-test for lot 3
# t-test for lot 2
t.test(subset(Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot == "Lot2"), mu=mean(Suspension_Coil$PSI)
### Del. 3
# t-test for all the lots, pop mu = 1500 psi
t.test(Suspension_Coil$PSI,mu=mean(Suspension_Coil$PSI))
# t-test for lot 1
t.test(subset(Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot == "Lot1"), mu=mean(Suspension_Coil$PSI)
# t-test for lot 1
t.test(subset(Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot == "Lot1"),mu=mean(Suspension_Coil$PSI))
# t-test for lot 1
t.test(subset(Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot == "Lot1"),mu=mean(Suspension_Coil$PSI))
# t-test for lot 2
t.test(subset(Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot == "Lot2"),mu=mean(Suspension_Coil$PSI))
# t-test for lot 3
t.test(subset(Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot == "Lot3"),mu=mean(Suspension_Coil$PSI))
# stat summary with summarize()
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI), .groups = 'keep')
lot_summary <- lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI),Median = median(PSI), Variance = var(PSI), SD = sd(PSI) , .groups = 'keep')
View(lot_summary)
View(lot_summary)
View(total_summary)
