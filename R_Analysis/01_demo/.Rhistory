knitr::opts_chunk$set(echo = TRUE)
install.packages("hflights")
install.packages("dplyer")
library(hflights)
library(dplyer)
library(dplyer)
install.packages("dplyr")
library(dplyr)
data(hflights)
head(hflights)
flights - as.data.frame(hflights)
flights =as.data.frame(hflights)
filter[flights$Month == 1 & flights$DayofMonth == 1, ]
filter[flights$Month == 1 & flights$DayofMonth == 1, ]
filter(flights, Month = 1, DayofMonth == 1)
filter(flights, Month == 1, DayofMonth == 1)
filter(flights, UniqueCarrier == "AA" |
Unique Carrier == "UA")
filter(flights, UniqueCarrier %in% c("AA", "UA"))
select(flights, DepTime, ArrTime, FlightNum)
select(flights, Year: DayofMonth, contains("Taxi"),
contains("Delay"), starts_with("Cancel"))
select(flights, -c(Year:TailNum))
x1 = 1:5; x2 = 2:6
sqrt(sum( (x1 - x2)^2) )
(x1 - x2)^2 %>% sum() %>% sqrt()
flights$Speed = flights$Distance / flights$Airtime * 60
flights$Speed = flights$Distance/flights$Airtime * 60
flights$Speed = flights$Distance/flights$AirTime * 60
flights[, c("Distance", "AirTime", "Speed")]
flights %>%
select(Distance, AirTime) %>%
mutate(Speed = Distance/AirTime * 60)
flights = flights %>% mutate(Speed =
Distance/AirTime * 60)
with(flights, tapply(ArrDelay, Dest, mean,
na.rm = TRUE))
aggregate(ArrDelay ~ Dest, flights, mean)
library(dplyr)
al1<-algae[,-(9:18)]
al1<-al1[,-(1:6)]
v=numeric(0)
for (x in c(7:8)){
q<-var(algae[,x],na.rm=TRUE)
v=c(v,q)
}
names(v)=c("NO3","NH4")
v
n=numeric(0)
for (x in c(7:8)){
q<-median(algae[,x],na.rm=TRUE)
n=c(n,q)
}
names(n)=c("NO3","NH4")
n
m=numeric(0)
for (x in c(7:8)){
q<-mad(algae[,x],na.rm=TRUE)
m=c(m,q)
}
names(m)=c("NO3","NH4")
m
?acf()\
?acf()
set.seed(200)
x = arima.sim(n = 200, model = list(ma = c(0.5)))
y = acf(x, main = expression(theta1 = theta))
acf = y$acf[2]
plot(acf)
acf
acv_ar <- acf(ar2)ar$acf[c(1,2)]/acf_ar$acf[1])
acv_ar <- acf(ar2,ar$acf[c(1,2)]/acf_ar$acf[1])
ar2 <- arima.sim(model = list(ar = c(.7, -.1), sd = 1), n = 200)
acv_ar <- acf(ar2, type = "correlation", main = "Sample ACF", plot = F)
Rho <- toeplitz(acf_ar$acf[c(1,2)]acv_ar$acf[1])
Rho <- toeplitz(acf_ar$acf[c(1,2)]/acv_ar$acf[1])
Rho <- toeplitz(acv_ar$acf[c(1,2)]/acv_ar$acf[1])
rho <- acv_ar$acf[c(2,3)]/acv_ar$acf[1]
phi_hat <- solve(Rho) %*% rho
phi_hat
?polyroot
polyroot(1,2,-8)
polyroot(c[1,2,-8])
polyroot(c(1,2,-8))
set.seed(200)
x = arima.sim(n = 200, model = list(ma = c(0.5)))
y = acf(x, main = expression(theta1 = theta))
acf = y$acf[2]
acf
plot(y)
polyroot(c(1,4/3,1/3))
polyroot(c(1,-5/2,1))
polyroot(c(1,-4/3,1/3))
set.seed(300)
x2 = arima.sim(n = 300, model = list(ma = c(2,-8)))
?arima.sim
?acf
y2 = acf(x2, main = expression(theta2 = theta))
acf = y2%acf[2]
acf = y2$acf[2]
acf2 = y2$acf[2]
acf = y$acf[2]
acf2
set.seed(300)
x2 = arima.sim(n = 300, model = list(ma = c(2,-8)))
y2 = acf(x2, main = expression(theta2 = theta))
acf2 = y2$acf[2]
acf2
library(bmp)
install.packages('bmp')
knitr::opts_chunk$set(echo=TRUE,
cache=TRUE,
fig.width=5,
fig.height=5,
fig.align='center')
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
solcode = TRUE
r = function(x, digits=2){ round(x, digits=digits) }
# install.packages('bmp')
library(bmp)
img = read.bmp('image1.bmp')
knitr::opts_chunk$set(echo=TRUE,
cache=TRUE,
fig.width=5,
fig.height=5,
fig.align='center')
indent1 = '    '
indent2 = paste(rep(indent1, 2), collapse='')
solcode = TRUE
r = function(x, digits=2){ round(x, digits=digits) }
# install.packages('bmp')
library(bmp)
img = read.bmp('image1.bmp')
img = t(img[ncol(img):1,])      # fix orientation
img = img - mean(img)           # subtract overall mean
gs = grey((0:255)/255)
image(img, asp=1, col=gs, yaxs='r', xaxt='n', yaxt='n')
?bmt::xaxt
?bmt::??xaxt
bmt::??xaxt
??bmt::xaxt
??xaxt
?graphics::xaxt
?graphics::??xaxt
?graphics::xaxt
graphics::??xaxt
graphics::xaxt
xaxt
??xaxt
# install.packages('bmp')
library(bmp)
img = read.bmp('image1.bmp')
img = t(img[ncol(img):1,])      # fix orientation
img = img - mean(img)           # subtract overall mean
prcomp(img)
gs
library(bmp)
pca.img <- prcomp(img)
pca.img2 <- img * pca.img$rotation
pca.img2
pca.img$x
sum(pca.img$x - (img * pca.img$rotation))^2
sum(pca.img$x - (img * pca.img$rotation)^2)
sum((pca.img2)^2)
sum((pca.img2))^2
sum((pca.img2)^2)
sum((pca.img)^2)
sum((pca.img))^2
sum(is.list(pca.img))^2
sum((pca.img))^2
sum((pca.img2))^2
sum((pca.img2)^2)
sum(pca.img$x(pca.img2)^2)
sum(pca.img$x-(pca.img2)^2)
sum((pca.img2)^2)
pca.img$x
pca.img3 <- prcomp(pca.img2)
pca.img3
sum((pca.img2)^2)
sum((pca.img2))^2
sum((pca.img2))^2
sum((pca.img2)^2)
sum((pca.img2))^2
sum(pca.img2^2)
sum((pca.img$x-pca.img2)^2)
sum((pca.img$x-pca.img2))^2
sum(pca.img$x - pca.img2)^2
pca.img$x-pca.img2
mean(pca.img$x-pca.img2)
mean((pca.img$x-pca.img2)
f
mean((pca.img$x-pca.img2)^2)
mean((pca.img$x-pca.img2))^2
norm(pca.img$x - pca.img2)
norm
?norm
norm(pca.img$x - pca.img2, type = "M")
norm(pca.img$x - pca.img2, type = "2")
norm(pca.img$x - pca.img2, type = "F")
norm(pca.img$x - pca.img2, type = "I")
norm((pca.img$x - pca.img2)^2, type = "M")
norm(pca.img$x - pca.img2, type = "M")
library(bmp)
pca.img2 <- img * pca.img$rotation
??na.rm
norm(pca.img$x - pca.img2, type = "1")
norm(pca.img$x - pca.img2, type = "0")
norm(pca.img$x - pca.img2, type = "O")
norm(pca.img$x - pca.img2, type = "M")
norm(pca.img$x - pca.img2, type = "M")^2
norm(pca.img$x - pca.img2, type = "M")
norm(pca.img$x - pca.img2)
norm(pca.img$x - pca.img2, type = "M")
set.seed(1)
sample(1:10, replace = F)
set.seed(1)
sample(1:10, replace = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
install.packages("tidyverse")
install.packages("jsonlite")
install.packages("Rtools")
setwd("C:/Users/zbzin/Desktop/Work Folder/Bootcamp UCB Extension Data Science/MechaCar_Statistical_Analysis/R_Analysis")
setwd("C:/Users/zbzin/Desktop/Work Folder/Bootcamp UCB Extension Data Science/MechaCar_Statistical_Analysis/R_Analysis/01_demo")
demo_table <- read.csv(file='demo.csv', check.names=F,stringsAsFactors = F)
library(jsonlite)
demo_table2 <- fromJSON(txt='demo.json')
demo_table[3,"Year"]
demo_table[3,3]
demo_table$"Vehicle_Class"
demo_table$"Vehicle_Class"[12]
demo_table$"Vehicle_Class"[2]
filter_table <- demo_table2[demo_table2$price > 10000,]
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
library(tidyverse)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data framce
summarize_demo <- demo_table2 $>$ group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups='keep') #create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups='keep') #create summary table
demo_table3 <- read.csv('demo2.csv', check.names = F, stringAsFactors = F)
setwd("C:/Users/zbzin/Desktop/Work Folder/Bootcamp UCB Extension Data Science/MechaCar_Statistical_Analysis/R_Analysis/01_demo")
demo_table3 <- read.csv('demo2.csv', check.names = F, stringAsFactors = F)
demo_table3 <- read.csv('demo2.csv',check.names = F, stringsAsFactors = F)
long_table <- gather(demo_table3,key="Metric",value="Score",buying-price:popularity)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
wide_table <- long_table %>% spread(key"Metric", value="Score")
wide_table <- long_table %>% spread(key="Metric", value="Score")
head(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plot + geom_bar() #plot bar chart
library(ggplot2)
plot + geom_bar() #plot bar chart
View(plt)
plt + geom_bar() #plot bar chart
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
shapiro.test(mtcars$wt)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
